#Создание БД
-- MySQL Script generated by MySQL Workbench
-- Sun May 26 16:55:19 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8mb4 ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`Patients`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Patients` (
  `patient_id` INT NOT NULL AUTO_INCREMENT,
  `patient_name` VARCHAR(100) NOT NULL,
  `dob` VARCHAR(100) NOT NULL,
  `patient_phone` VARCHAR(100) NOT NULL,
  `patient_email` VARCHAR(100) NULL,
  `anamnesis` VARCHAR(256) NULL,
  PRIMARY KEY (`patient_id`));


-- -----------------------------------------------------
-- Table `mydb`.`Schedule`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Schedule` (
  `datetime` VARCHAR(100) NOT NULL,
  `patient_id` INT NULL,
  PRIMARY KEY (`datetime`),
  UNIQUE INDEX `datetime_UNIQUE` (`datetime` ASC) INVISIBLE,
  INDEX `schedule_patient_id_idx` (`patient_id` ASC) VISIBLE,
  CONSTRAINT `schedule_patient_id`
    FOREIGN KEY (`patient_id`)
    REFERENCES `mydb`.`Patients` (`patient_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `mydb`.`Diagnoses`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Diagnoses` (
  `diagnosis_id` INT NOT NULL AUTO_INCREMENT,
  `diagnosis_name` VARCHAR(100) NOT NULL,
  `diagnosis_desc` VARCHAR(350) NOT NULL,
  PRIMARY KEY (`diagnosis_id`),
  UNIQUE INDEX `diagnosis_name_UNIQUE` (`diagnosis_name` ASC) VISIBLE);


-- -----------------------------------------------------
-- Table `mydb`.`Medicines`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Medicines` (
  `medicine_id` INT NOT NULL AUTO_INCREMENT,
  `medicine_name` VARCHAR(100) NOT NULL,
  `medicine_desc` VARCHAR(250) NOT NULL,
  `medicine_dose` VARCHAR(250) NULL,
  `receipt` TINYINT NOT NULL,
  PRIMARY KEY (`medicine_id`),
  UNIQUE INDEX `medicine_name_UNIQUE` (`medicine_name` ASC) VISIBLE);


-- -----------------------------------------------------
-- Table `mydb`.`Therapies`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Therapies` (
  `therapy_id` INT NOT NULL AUTO_INCREMENT,
  `therapy_name` VARCHAR(100) NOT NULL,
  `therapy_desc` VARCHAR(250) NOT NULL,
  PRIMARY KEY (`therapy_id`),
  UNIQUE INDEX `therapy_name_UNIQUE` (`therapy_name` ASC) VISIBLE);


-- -----------------------------------------------------
-- Table `mydb`.`patients_medicines`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`patients_medicines` (
  `patient_id` INT NOT NULL,
  `medicine_id` INT NOT NULL,
  `medicine_dose` VARCHAR(250) NULL,
  `medicine_start` DATE NOT NULL,
  `medicine_end` DATE NOT NULL,
  `medicine_result` VARCHAR(250) NULL,
  PRIMARY KEY (`patient_id`, `medicine_id`),
  INDEX `medicine_id_key_idx` (`medicine_id` ASC) INVISIBLE,
  INDEX `patient_id_key_idx` (`patient_id` ASC) VISIBLE,
  CONSTRAINT `mpatient_id_key`
    FOREIGN KEY (`patient_id`)
    REFERENCES `mydb`.`Patients` (`patient_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `pmedicine_id_key`
    FOREIGN KEY (`medicine_id`)
    REFERENCES `mydb`.`Medicines` (`medicine_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `mydb`.`patients_diagnoses`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`patients_diagnoses` (
  `patient_id` INT NOT NULL,
  `diagnosis_id` INT NOT NULL,
  `diagnosis_date` DATE NOT NULL,
  `actuality` TINYINT NOT NULL,
  PRIMARY KEY (`patient_id`, `diagnosis_id`),
  INDEX `diagnosis_id_key_idx` (`diagnosis_id` ASC) VISIBLE,
  INDEX `patient_id_key_idx` (`patient_id` ASC) VISIBLE,
  CONSTRAINT `dpatient_id_key`
    FOREIGN KEY (`patient_id`)
    REFERENCES `mydb`.`Patients` (`patient_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `pdiagnosis_id_key`
    FOREIGN KEY (`diagnosis_id`)
    REFERENCES `mydb`.`Diagnoses` (`diagnosis_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `mydb`.`patients_therapies`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`patients_therapies` (
  `patient_id` INT NOT NULL,
  `therapy_id` INT NOT NULL,
  `therapy_start` DATE NOT NULL,
  `therapy_end` DATE NOT NULL,
  `therapy_result` VARCHAR(250) NULL,
  PRIMARY KEY (`patient_id`, `therapy_id`),
  INDEX `therapy_id_key_idx` (`therapy_id` ASC) VISIBLE,
  INDEX `patient_id_key_idx` (`patient_id` ASC) VISIBLE,
  CONSTRAINT `tpatient_id_key`
    FOREIGN KEY (`patient_id`)
    REFERENCES `mydb`.`Patients` (`patient_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `ptherapy_id_key`
    FOREIGN KEY (`therapy_id`)
    REFERENCES `mydb`.`Therapies` (`therapy_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `mydb`.`diagnoses_medicines`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`diagnoses_medicines` (
  `diagnosis_id` INT NOT NULL,
  `medicine_id` INT NOT NULL,
  PRIMARY KEY (`diagnosis_id`, `medicine_id`),
  INDEX `medicne_id_key_idx` (`medicine_id` ASC) INVISIBLE,
  INDEX `diagnosis_id_key_idx` (`diagnosis_id` ASC) VISIBLE,
  CONSTRAINT `mdiagnosis_id_key`
    FOREIGN KEY (`diagnosis_id`)
    REFERENCES `mydb`.`Diagnoses` (`diagnosis_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `dmedicne_id_key`
    FOREIGN KEY (`medicine_id`)
    REFERENCES `mydb`.`Medicines` (`medicine_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `mydb`.`diagnoses_therapies`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`diagnoses_therapies` (
  `diagnosis_id` INT NOT NULL,
  `therapy_id` INT NOT NULL,
  PRIMARY KEY (`diagnosis_id`, `therapy_id`),
  INDEX `therapy_id_key_idx` (`therapy_id` ASC) VISIBLE,
  INDEX `diagnosis_id_key_idx` (`diagnosis_id` ASC) VISIBLE,
  CONSTRAINT `tdiagnosis_id_key`
    FOREIGN KEY (`diagnosis_id`)
    REFERENCES `mydb`.`Diagnoses` (`diagnosis_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `dtherapy_id_key`
    FOREIGN KEY (`therapy_id`)
    REFERENCES `mydb`.`Therapies` (`therapy_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);

USE `mydb`;

DELIMITER $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`Patients_BEFORE_INSERT` BEFORE INSERT ON `Patients` FOR EACH ROW
BEGIN
	IF (EXISTS(SELECT 1 FROM `mydb`.`Patients` WHERE `patient_name` = NEW.`patient_name`)) THEN
		IF (EXISTS(SELECT 1 FROM `mydb`.`Patients` WHERE `patient_phone` = NEW.`patient_phone`)) THEN
		SIGNAL SQLSTATE VALUE '45000' SET MESSAGE_TEXT = 'INSERT failed due to duplicate user.';
        END IF;
	END IF;
END$$

USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`Patients_BEFORE_DELETE` BEFORE DELETE ON `Patients` FOR EACH ROW
BEGIN
	DELETE FROM `mydb`.`patients_diagnoses` WHERE `patient_id`=OLD.`patient_id`;
	DELETE FROM `mydb`.`patients_medicines` WHERE `patient_id`=OLD.`patient_id`;
	DELETE FROM `mydb`.`patients_therapies` WHERE `patient_id`=OLD.`patient_id`;
    UPDATE `mydb`.`Schedule` SET `patient_id`=NULL WHERE `patient_id`=OLD.`patient_id`;
END$$

USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`Schedule_BEFORE_INSERT` BEFORE INSERT ON `Schedule` FOR EACH ROW
BEGIN
	IF (EXISTS(SELECT 1 FROM `mydb`.`Schedule` WHERE `datetime` = NEW.`datetime` AND `patient_id` = NEW.`patient_id`)) THEN
	SIGNAL SQLSTATE VALUE '45000' SET MESSAGE_TEXT = 'INSERT failed due to duplicate pair.';
	END IF;
END$$

USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`Diagnoses_BEFORE_INSERT` BEFORE INSERT ON `Diagnoses` FOR EACH ROW
BEGIN
	IF (EXISTS(SELECT 1 FROM `mydb`.`Diagnoses` WHERE `diagnosis_name` = NEW.`diagnosis_name`)) THEN
	SIGNAL SQLSTATE VALUE '45000' SET MESSAGE_TEXT = 'INSERT failed due to duplicate diagnosis.';
	END IF;
END$$

USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`Diagnoses_BEFORE_DELETE` BEFORE DELETE ON `Diagnoses` FOR EACH ROW
BEGIN
	DELETE FROM `mydb`.`diagnoses_medicines` WHERE `diagnosis_id`=OLD.`diagnosis_id`;
	DELETE FROM `mydb`.`diagnoses_therapies` WHERE `diagnosis_id`=OLD.`diagnosis_id`;
	DELETE FROM `mydb`.`patients_diagnoses` WHERE `diagnosis_id`=OLD.`diagnosis_id`;
END$$

USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`Medicines_BEFORE_INSERT` BEFORE INSERT ON `Medicines` FOR EACH ROW
BEGIN
	IF (EXISTS(SELECT 1 FROM `mydb`.`Medicines` WHERE `medicine_name` = NEW.`medicine_name`)) THEN
	SIGNAL SQLSTATE VALUE '45000' SET MESSAGE_TEXT = 'INSERT failed due to duplicate medicine.';
	END IF;
END$$

USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`Medicines_BEFORE_DELETE` BEFORE DELETE ON `Medicines` FOR EACH ROW
BEGIN
	DELETE FROM `mydb`.`diagnoses_medicines` WHERE `medicine_id`=OLD.`medicine_id`;
	DELETE FROM `mydb`.`patients_medicines` WHERE `medicine_id`=OLD.`medicine_id`;
END$$

USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`Therapies_BEFORE_INSERT` BEFORE INSERT ON `Therapies` FOR EACH ROW
BEGIN
	IF (EXISTS(SELECT 1 FROM `mydb`.`Therapies` WHERE `therapy_name` = NEW.`therapy_name`)) THEN
	SIGNAL SQLSTATE VALUE '45000' SET MESSAGE_TEXT = 'INSERT failed due to duplicate user.';
	END IF;
END$$

USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`Therapies_BEFORE_DELETE` BEFORE DELETE ON `Therapies` FOR EACH ROW
BEGIN
	DELETE FROM `mydb`.`diagnoses_therapies` WHERE `therapy_id`=OLD.`therapy_id`;
	DELETE FROM `mydb`.`patients_therapies` WHERE `therapy_id`=OLD.`therapy_id`;
END$$

USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`patients_medicines_BEFORE_INSERT` BEFORE INSERT ON `patients_medicines` FOR EACH ROW
BEGIN
	IF (EXISTS(SELECT 1 FROM `mydb`.`patients_medicines` WHERE `medicine_id` = NEW.`medicine_id` AND `patient_id` = NEW.`patient_id` AND `medicine_start` = NEW.`medicine_start`)) THEN
	SIGNAL SQLSTATE VALUE '45000' SET MESSAGE_TEXT = 'INSERT failed due to duplicate pair.';
	END IF;
END$$

USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`patients_diagnoses_BEFORE_INSERT` BEFORE INSERT ON `patients_diagnoses` FOR EACH ROW
BEGIN
	IF (EXISTS(SELECT 1 FROM `mydb`.`patients_diagnoses` WHERE `diagnosis_id` = NEW.`diagnosis_id` AND `patient_id` = NEW.`patient_id` AND `diagnosis_date` = NEW.`diagnosis_date`)) THEN
	SIGNAL SQLSTATE VALUE '45000' SET MESSAGE_TEXT = 'INSERT failed due to duplicate pair.';
	END IF;
END$$

USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`patients_therapies_BEFORE_INSERT` BEFORE INSERT ON `patients_therapies` FOR EACH ROW
BEGIN
	IF (EXISTS(SELECT 1 FROM `mydb`.`patients_therapies` WHERE `therapy_id` = NEW.`therapy_id` AND `patient_id` = NEW.`patient_id` AND `therapy_start` = NEW.`therapy_start`)) THEN
	SIGNAL SQLSTATE VALUE '45000' SET MESSAGE_TEXT = 'INSERT failed due to duplicate pair.';
	END IF;
END$$

USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`diagnoses_medicines_BEFORE_INSERT` BEFORE INSERT ON `diagnoses_medicines` FOR EACH ROW
BEGIN
	IF (EXISTS(SELECT 1 FROM `mydb`.`diagnoses_medicines` WHERE `diagnosis_id` = NEW.`diagnosis_id` AND `medicine_id` = NEW.`medicine_id`)) THEN
	SIGNAL SQLSTATE VALUE '45000' SET MESSAGE_TEXT = 'INSERT failed due to duplicate pair.';
	END IF;
END$$

USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`diagnoses_therapies_BEFORE_INSERT` BEFORE INSERT ON `diagnoses_therapies` FOR EACH ROW
BEGIN
	IF (EXISTS(SELECT 1 FROM `mydb`.`diagnoses_therapies` WHERE `diagnosis_id` = NEW.`diagnosis_id` AND `therapy_id` = NEW.`therapy_id`)) THEN
	SIGNAL SQLSTATE VALUE '45000' SET MESSAGE_TEXT = 'INSERT failed due to duplicate pair.';
	END IF;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
